#include "defines.h"
using namespace std;
using namespace vex;
using namespace G;
Color=Red;

AutoRunning=1;
GlobalGyro=0;
// intake=off;
// DontLiftStack=on;
//  rampwheel.suspend();
// RampWheelL.resetRotation();
//  RampWheelR.resetRotation();
 rightDrive(-10);
 leftDrive(-10);
arm.suspend();
      ArmL.setVelocity(100,vex::velocityUnits::pct);
      ArmR.setVelocity(100,vex::velocityUnits::pct);
     
      ArmR.startRotateTo(300,rotationUnits::deg);
      ArmL.rotateTo(300,rotationUnits::deg);
      ManualSpeed=-100;
      intake=manual;
      ArmR.startRotateTo(600,rotationUnits::deg);
      ArmL.rotateTo(600,rotationUnits::deg);
      intake=on;
      RampWheelL.setVelocity(60,vex::velocityUnits::pct);
      RampWheelR.setVelocity(60,vex::velocityUnits::pct);
      RampWheelR.startRotateTo(-150,rotationUnits::deg);
      RampWheelL.startRotateTo(-150,rotationUnits::deg);
//      //ArmL.setVelocity(50,vex::velocityUnits::pct);
//      //ArmR.setVelocity(50,vex::velocityUnits::pct);
      ArmR.startRotateTo(0,rotationUnits::deg);
      ArmL.rotateTo(0,rotationUnits::deg);
      wait(200);
intake=manual;
ManualSpeed=60;
DontLiftStack=on;

MoveG(50,14,1,0,brake,2500);
intake=off;
wait(200);
ArmL.setVelocity(65,vex::velocityUnits::pct);
ArmR.setVelocity(65,vex::velocityUnits::pct);
ArmR.startRotateTo(430, rotationUnits::deg);
ArmL.startRotateTo(430, rotationUnits::deg);
Turn(88*Color,30,6000);
MoveG(60,5,1,88*Color,brake,8000);
ManualSpeed=-80;
intake=manual;
wait(300);
MoveG(60,-5,1,88*Color,brake,8000);
ArmR.startRotateTo(0, rotationUnits::deg);
ArmL.startRotateTo(0,rotationUnits::deg);
Turn(-88*Color,30,6000);
//wait(200);
MoveG(50,-6,1,0,coast,8000);
MoveG(50,6,1,0,coast,8000);
ramp = fwrd;
RunRamp=on;
MoveG(20,13,0,0,brake,8000);
T3=0;
while(RunRamp&&T3<1500){wait(10);}
RunRamp=off;
ramp = bwrd;
RunRamp=on;
MoveG(60,15,0,0,brake,8000); ///Ram into 4 stack
intake=on;
DontLiftStack=off;
wait(300);
MoveG(60,-28,0,0,brake,8000);
// wait(200);
Turn(88*Color,30,6000);
DontLiftStack=on;
// wait(200);
MoveG(60,7,1,88*Color,brake,8000);
// wait(200);
// ArcTurnG(90, -7.45);
// MoveG(60,-4,1,0,brake,8000);
// ArcTurnG(45, 7.45);
// ArcTurnG(-45, 7.45);
MoveG(60,-6,1,88*Color,brake,8000);
// wait(200);
Turn(-120*Color,30,6000);
// wait(200);
MoveG(60,18,1,-120*Color,brake,8000);
// wait(200);
Turn(18*Color,30,6000);
// wait(200);
intake=off;
ArmR.startRotateTo(325,rotationUnits::deg);
ArmL.startRotateTo(325,rotationUnits::deg);
MoveG(60,6,1,0,brake,8000);
while(fabs(enc(ArmR))<325&&fabs(enc(ArmL))<325){wait(10);}
MoveG(40,2,1,0,brake,8000);
ManualSpeed=-80;
intake=manual;
wait(300);
ArmR.startRotateTo(0,rotationUnits::deg);
ArmL.startRotateTo(0,rotationUnits::deg);
intake=on;
DontLiftStack=off;
MoveG(60,-3.5,1,0,coast,8000);
MoveG(60,7,1,0,brake,8000);
MoveG(60,-3.5,1,0,coast,8000);
// wait(100);
Turn(-18*Color,30,6000);
// wait(100);
MoveG(60,-17,1,-18*Color,brake,8000);
// wait(100);
Turn(-70*Color,30,6000);
// wait(100);
MoveG(60,20,1,-90*Color,brake,8000);
// wait(100);
Turn(-25*Color,30,6000);
// wait(100);
MoveG(30,11,1,-25*Color,brake,8000);
wait(100);
AutoStack();
MoveG(60,-8.5,1,-115*Color,brake,8000);
// wait(100);
Turn(25*Color,30,6000);
// wait(100);
MoveG(60,-10,1,-90*Color,brake,8000);
// wait(100);
Turn(84*Color,30,6000);
// wait(100);
intake=on;
DontLiftStack=off;
MoveG(75,36,0,0,coast,6000);
// ramp = fwrd;
// RunRamp=on;
MoveG(40,13,0,0,coast,8000);
// T3=0;
// while(RunRamp&&T3<1500){wait(10);}
// RunRamp=off;
// ramp = bwrd;
// RunRamp=on;
MoveG(60,20,0,0,brake,8000); ///Ram into 4 stack
intake=on;
DontLiftStack=on;
Turn(88*Color,30,6000);
MoveG(60,7,1,88*Color,brake,8000);
MoveG(60,-5,1,88*Color,brake,8000);
intake=off;
wait(200);
ArmL.setVelocity(65,vex::velocityUnits::pct);
ArmR.setVelocity(65,vex::velocityUnits::pct);
ArmR.startRotateTo(430, rotationUnits::deg);
ArmL.startRotateTo(430, rotationUnits::deg);
ManualSpeed=-80;
intake=manual;
wait(300);
MoveG(60,-5,1,88*Color,brake,8000);
ArmR.startRotateTo(0, rotationUnits::deg);
ArmL.startRotateTo(0,rotationUnits::deg);
Turn(-140*Color,40,6000);
MoveG(75,36,1,-30*Color,brake,8000);
AutoStack();

